{
    "sourceFile": "src/doctor/DoctorRoute.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1745229966430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745229995006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n   const {\n     name,\n     specialization,\n     location,\n-    \n+    email,\\\\\\\n     phone,\n     registration_number,\n     years_of_experience,\n     date_of_birth,\n"
                }
            ],
            "date": 1745229966430,
            "name": "Commit-0",
            "content": "// backend/routes/doctor.js\nconst express = require('express');\nconst router = express.Router();\nconst Doctor = require('./Doctor');\n\n// GET all doctors\nrouter.get('/', async (req, res) => {\n  try {\n    const doctors = await Doctor.find().populate('headOffice');\n    res.json(doctors);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// GET doctor by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const doctor = await Doctor.findById(req.params.id).populate('headOffice');\n    if (!doctor) return res.status(404).json({ message: 'Doctor not found' });\n    res.json(doctor);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n});\n\n// CREATE a new doctor\nrouter.post('/', async (req, res) => {\n  const {\n    name,\n    specialization,\n    location,\n    \n    phone,\n    registration_number,\n    years_of_experience,\n    date_of_birth,\n    gender,\n    anniversary,\n    head_office, // Expect head_office to be the ObjectId of a HeadOffice\n  } = req.body;\n\n  const doctor = new Doctor({\n    name,\n    specialization,\n    location,\n    email,\n    phone,\n    registration_number,\n    years_of_experience,\n    date_of_birth,\n    gender,\n    anniversary,\n    headOffice: head_office,\n  });\n\n  try {\n    const newDoctor = await doctor.save();\n    res.status(201).json(newDoctor);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n});\n\n// UPDATE a doctor\nrouter.put('/:id', async (req, res) => {\n  try {\n    const doctor = await Doctor.findById(req.params.id);\n    if (!doctor) return res.status(404).json({ message: 'Doctor not found' });\n\n    // Update fields if provided\n    doctor.name = req.body.name || doctor.name;\n    doctor.specialization = req.body.specialization || doctor.specialization;\n    doctor.location = req.body.location || doctor.location;\n    doctor.email = req.body.email || doctor.email;\n    doctor.phone = req.body.phone || doctor.phone;\n    doctor.registration_number = req.body.registration_number || doctor.registration_number;\n    doctor.years_of_experience = req.body.years_of_experience || doctor.years_of_experience;\n    doctor.date_of_birth = req.body.date_of_birth || doctor.date_of_birth;\n    doctor.gender = req.body.gender || doctor.gender;\n    doctor.anniversary = req.body.anniversary || doctor.anniversary;\n    doctor.headOffice = req.body.head_office || doctor.headOffice;\n\n    const updatedDoctor = await doctor.save();\n    res.json(updatedDoctor);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n});\n\n// DELETE a doctor\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const deletedDoctor = await Doctor.findByIdAndDelete(req.params.id);\n    if (!deletedDoctor) {\n      return res.status(404).json({ message: 'Doctor not found' });\n    }\n    res.json({ message: 'Doctor deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n});\n\n\n\nrouter.post('/:id/visit', async (req, res) => {\n  try {\n    const doctor = await Doctor.findById(req.params.id);\n    if (!doctor) {\n      return res.status(404).json({ message: 'Doctor not found' });\n    }\n\n    doctor.visit_history.push(req.body);\n    await doctor.save();\n    res.status(201).json({ message: 'Visit added', doctor });\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n});\n\n\nrouter.put('/:id/visit/:visitId/confirm', async (req, res) => {\n  try {\n    const doctor = await Doctor.findById(req.params.id);\n    if (!doctor) {\n      return res.status(404).json({ message: 'Doctor not found' });\n    }\n\n    const visit = doctor.visit_history.id(req.params.visitId);\n    if (!visit) {\n      return res.status(404).json({ message: 'Visit not found' });\n    }\n\n    visit.confirmed = true;\n    await doctor.save();\n\n    res.json({ message: 'Visit confirmed', doctor });\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n});\nrouter.post('/:id/visit', async (req, res) => {\n  try {\n    const doctor = await Doctor.findById(req.params.id);\n    if (!doctor) {\n      return res.status(404).json({ message: 'Doctor not found' });\n    }\n\n  \n    const { date, notes, userName, salesRep } = req.body;\n\n    doctor.visit_history.push({ date, notes, userName, salesRep });\n    await doctor.save();\n    res.status(201).json({ message: 'Visit added', doctor });\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n});\n\n\n// GET doctors by HeadOffice ID\nrouter.get('/by-head-office/:headOfficeId', async (req, res) => {\n  try {\n    const doctors = await Doctor.find({ headOffice: req.params.headOfficeId }).populate('headOffice');\n    res.json(doctors);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n});\n\n\n\nmodule.exports = router;\n"
        }
    ]
}