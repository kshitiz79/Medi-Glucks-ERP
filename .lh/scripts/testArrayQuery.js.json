{
    "sourceFile": "scripts/testArrayQuery.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757009643455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757009643455,
            "name": "Commit-0",
            "content": "const mongoose = require('mongoose');\nrequire('dotenv').config();\n\n// Import models\nconst User = require('../src/user/User');\n\n// MongoDB connection\nconst connectDB = async () => {\n  try {\n    const conn = await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/glcukscare', {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n  } catch (error) {\n    console.error(`Error: ${error.message}`);\n    process.exit(1);\n  }\n};\n\n// Function to test array query behavior\nconst testArrayQueryBehavior = async () => {\n  try {\n    console.log('Testing array query behavior...');\n    \n    // Test with a single-element array\n    const singleElementId = new mongoose.Types.ObjectId('68a2f6f9c2507f6549b12547'); // Madhubani\n    \n    console.log('\\n=== SINGLE ELEMENT ARRAY TEST ===');\n    console.log(`Testing with single element ID: ${singleElementId}`);\n    \n    // Create a test query similar to what we're using\n    const singleElementQuery = { \n      isActive: true,\n      headOffices: { $in: [singleElementId] }\n    };\n    \n    console.log(`Query:`, JSON.stringify(singleElementQuery, null, 2));\n    \n    const singleResult = await User.find(singleElementQuery).select('name email headOffices');\n    console.log(`Single element query returned ${singleResult.length} users:`);\n    singleResult.forEach(user => {\n      console.log(`  - ${user.name} (${user.email})`);\n    });\n    \n    // Test with multiple-element array containing the same ID\n    console.log('\\n=== MULTIPLE ELEMENT ARRAY TEST ===');\n    const multiElementIds = [\n      singleElementId,\n      new mongoose.Types.ObjectId('68a42d720fd473dd1c3074d3') // Darbhanga\n    ];\n    \n    console.log(`Testing with multiple element IDs:`, multiElementIds.map(id => id.toString()));\n    \n    const multiElementQuery = { \n      isActive: true,\n      headOffices: { $in: multiElementIds }\n    };\n    \n    console.log(`Query:`, JSON.stringify(multiElementQuery, null, 2));\n    \n    const multiResult = await User.find(multiElementQuery).select('name email headOffices');\n    console.log(`Multiple element query returned ${multiResult.length} users:`);\n    multiResult.forEach(user => {\n      console.log(`  - ${user.name} (${user.email})`);\n    });\n    \n    // Test direct equality query\n    console.log('\\n=== DIRECT EQUALITY TEST ===');\n    const directQuery = { \n      isActive: true,\n      headOffices: singleElementId\n    };\n    \n    console.log(`Query:`, JSON.stringify(directQuery, null, 2));\n    \n    const directResult = await User.find(directQuery).select('name email headOffices');\n    console.log(`Direct equality query returned ${directResult.length} users:`);\n    directResult.forEach(user => {\n      console.log(`  - ${user.name} (${user.email})`);\n    });\n    \n    // Test $all query\n    console.log('\\n=== $ALL QUERY TEST ===');\n    const allQuery = { \n      isActive: true,\n      headOffices: { $all: [singleElementId] }\n    };\n    \n    console.log(`Query:`, JSON.stringify(allQuery, null, 2));\n    \n    const allResult = await User.find(allQuery).select('name email headOffices');\n    console.log(`$all query returned ${allResult.length} users:`);\n    allResult.forEach(user => {\n      console.log(`  - ${user.name} (${user.email})`);\n    });\n    \n  } catch (error) {\n    console.error('Error testing array query behavior:', error);\n  }\n};\n\n// Run the test\nconst run = async () => {\n  await connectDB();\n  await testArrayQueryBehavior();\n  process.exit(0);\n};\n\nrun();"
        }
    ]
}