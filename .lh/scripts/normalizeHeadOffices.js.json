{
    "sourceFile": "scripts/normalizeHeadOffices.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757009643455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757009643455,
            "name": "Commit-0",
            "content": "const mongoose = require('mongoose');\nrequire('dotenv').config();\n\n// Import models\nconst User = require('../src/user/User');\n\n// MongoDB connection\nconst connectDB = async () => {\n  try {\n    const conn = await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/glcukscare');\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n  } catch (error) {\n    console.error(`Error: ${error.message}`);\n    process.exit(1);\n  }\n};\n\n// Function to normalize and save all users' headOffices data\nconst normalizeAllUsersHeadOffices = async () => {\n  try {\n    console.log('Normalizing all users headOffices data...\\n');\n    \n    // Find all users\n    const allUsers = await User.find({}).select('_id name email headOffice headOffices isActive');\n    \n    console.log(`Found ${allUsers.length} total users\\n`);\n    \n    let updatedCount = 0;\n    \n    for (const user of allUsers) {\n      console.log(`Processing: ${user.name} (${user.email})`);\n      \n      // Check if user has headOffices array\n      if (user.headOffices && Array.isArray(user.headOffices)) {\n        console.log(`  Has ${user.headOffices.length} head offices`);\n        \n        // Normalize each head office entry\n        let normalizedHeadOffices = [];\n        let hasChanges = false;\n        \n        for (const office of user.headOffices) {\n          if (office) {\n            // Handle different data formats\n            if (typeof office === 'string') {\n              // String ObjectId - convert to ObjectId\n              try {\n                normalizedHeadOffices.push(new mongoose.Types.ObjectId(office));\n                hasChanges = true;\n                console.log(`    Converted string to ObjectId: ${office}`);\n              } catch (err) {\n                console.log(`    Failed to convert string: ${office}`);\n              }\n            } else if (office._id) {\n              // Object with _id field - extract the ObjectId\n              try {\n                normalizedHeadOffices.push(new mongoose.Types.ObjectId(office._id));\n                hasChanges = true;\n                console.log(`    Extracted ObjectId from object: ${office._id}`);\n              } catch (err) {\n                console.log(`    Failed to extract ObjectId: ${office._id}`);\n              }\n            } else if (office instanceof mongoose.Types.ObjectId) {\n              // Already an ObjectId - keep as is\n              normalizedHeadOffices.push(office);\n            } else {\n              // Unknown format - try to convert\n              try {\n                normalizedHeadOffices.push(new mongoose.Types.ObjectId(office.toString()));\n                hasChanges = true;\n                console.log(`    Converted unknown format: ${office}`);\n              } catch (err) {\n                console.log(`    Failed to convert unknown format: ${office}`);\n              }\n            }\n          }\n        }\n        \n        // Update user if there were changes\n        if (hasChanges) {\n          user.headOffices = normalizedHeadOffices;\n          // Remove single headOffice field to avoid confusion\n          user.headOffice = undefined;\n          \n          try {\n            await user.save();\n            console.log(`  ✓ Updated user successfully`);\n            updatedCount++;\n          } catch (saveErr) {\n            console.log(`  ✗ Failed to save user:`, saveErr.message);\n          }\n        } else {\n          console.log(`  No changes needed`);\n        }\n      } else {\n        console.log(`  No headOffices array found`);\n      }\n      \n      console.log(''); // Empty line for readability\n    }\n    \n    console.log(`=== SUMMARY ===`);\n    console.log(`Updated ${updatedCount} users`);\n    console.log(`Normalization completed!\\n`);\n    \n    // Final verification\n    console.log('=== FINAL VERIFICATION ===');\n    \n    // Test the Bihar query\n    const biharHeadOfficeIds = [\n      new mongoose.Types.ObjectId('68a2f6f9c2507f6549b12547'), // Madhubani\n      new mongoose.Types.ObjectId('68a42d720fd473dd1c3074d3'), // Darbhanga\n      new mongoose.Types.ObjectId('68aef669aad40b6e2db0b415'), // Samastipur\n      new mongoose.Types.ObjectId('68aef792aad40b6e2db0b559'), // Katihar\n      new mongoose.Types.ObjectId('68a2f6a7c2507f6549b1253a'),  // Gaya\n    ];\n    \n    const biharUsers = await User.find({ \n      isActive: true, \n      headOffices: { $in: biharHeadOfficeIds } \n    }).select('name email headOffices');\n    \n    console.log(`Found ${biharUsers.length} users in Bihar state:`);\n    biharUsers.forEach(user => {\n      console.log(`  - ${user.name} (${user.email})`);\n    });\n    \n  } catch (error) {\n    console.error('Error normalizing user headOffices data:', error);\n  }\n};\n\n// Run the normalization\nconst run = async () => {\n  await connectDB();\n  await normalizeAllUsersHeadOffices();\n  process.exit(0);\n};\n\nrun();"
        }
    ]
}