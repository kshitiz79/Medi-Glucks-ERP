{
    "sourceFile": "scripts/fixAllUsersHeadOffices.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757009643456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757009643456,
            "name": "Commit-0",
            "content": "const mongoose = require('mongoose');\nrequire('dotenv').config();\n\n// Import models\nconst User = require('../src/user/User');\n\n// MongoDB connection\nconst connectDB = async () => {\n  try {\n    const conn = await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/glcukscare', {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n  } catch (error) {\n    console.error(`Error: ${error.message}`);\n    process.exit(1);\n  }\n};\n\n// Function to fix all users' headOffices data\nconst fixAllUsersHeadOffices = async () => {\n  try {\n    console.log('Starting comprehensive user headOffices data fix...');\n    \n    // Find all users\n    const allUsers = await User.find({}).select('_id name email headOffice headOffices role');\n    \n    console.log(`Found ${allUsers.length} total users`);\n    \n    let fixedCount = 0;\n    let processedCount = 0;\n    \n    for (const user of allUsers) {\n      processedCount++;\n      console.log(`\\n[${processedCount}/${allUsers.length}] Processing user: ${user.name} (${user.email}) - Role: ${user.role}`);\n      \n      let needsUpdate = false;\n      \n      // Ensure headOffices is an array\n      if (!Array.isArray(user.headOffices)) {\n        user.headOffices = [];\n        needsUpdate = true;\n        console.log(`  Fixed: headOffices is not an array, initialized as empty array`);\n      }\n      \n      // If user has a single headOffice, add it to headOffices array\n      if (user.headOffice) {\n        const headOfficeId = user.headOffice.toString();\n        const isAlreadyInArray = user.headOffices.some(ho => \n          ho.toString() === headOfficeId\n        );\n        \n        if (!isAlreadyInArray) {\n          user.headOffices.push(user.headOffice);\n          needsUpdate = true;\n          console.log(`  Added headOffice ${headOfficeId} to headOffices array`);\n        } else {\n          console.log(`  headOffice already in headOffices array`);\n        }\n      }\n      \n      // Fix data types in headOffices array\n      let updatedHeadOffices = [];\n      for (const office of user.headOffices) {\n        if (typeof office === 'string') {\n          try {\n            updatedHeadOffices.push(new mongoose.Types.ObjectId(office));\n            needsUpdate = true;\n            console.log(`  Converted string to ObjectId: ${office}`);\n          } catch (err) {\n            console.log(`  Failed to convert string to ObjectId: ${office}`);\n          }\n        } else {\n          updatedHeadOffices.push(office);\n        }\n      }\n      \n      // Update the user if needed\n      if (needsUpdate) {\n        user.headOffices = updatedHeadOffices;\n        // Remove single headOffice field to avoid confusion\n        user.headOffice = undefined;\n        \n        try {\n          await user.save();\n          console.log(`  ✓ Updated user: ${user.name}`);\n          fixedCount++;\n        } catch (saveErr) {\n          console.log(`  ✗ Failed to save user: ${user.name}`, saveErr.message);\n        }\n      } else {\n        console.log(`  No changes needed for user: ${user.name}`);\n      }\n    }\n    \n    console.log(`\\n=== SUMMARY ===`);\n    console.log(`Processed ${processedCount} users`);\n    console.log(`Fixed ${fixedCount} users`);\n    console.log(`Data fix completed successfully!`);\n    \n    // Verify the fix by testing the specific Bihar state query\n    console.log('\\n=== VERIFICATION ===');\n    console.log('Testing Bihar state user query...');\n    \n    // Get all head offices in Bihar state (this would normally come from the state)\n    const biharHeadOfficeIds = [\n      '68a2f682c2507f6549b12533', // Patna\n      '68a2f6a7c2507f6549b1253a', // Gaya\n      '68a2f6bec2507f6549b12542', // Bhagalpur\n      '68a2f6f9c2507f6549b12547', // Madhubani\n      '68a42d720fd473dd1c3074d3', // Darbhanga\n      '68aef669aad40b6e2db0b415', // Samastipur\n      '68aef792aad40b6e2db0b559', // Katihar\n      // ... (all other Bihar head offices)\n    ];\n    \n    // Convert to ObjectIds\n    const biharHeadOfficeObjectIds = biharHeadOfficeIds.map(id => new mongoose.Types.ObjectId(id));\n    \n    // Test query that should return all Bihar users\n    const biharUsers = await User.find({ \n      isActive: true, \n      headOffices: { $in: biharHeadOfficeObjectIds } \n    }).select('name email headOffices');\n    \n    console.log(`Found ${biharUsers.length} users in Bihar state:`);\n    biharUsers.forEach(user => {\n      console.log(`  - ${user.name} (${user.email})`);\n    });\n    \n  } catch (error) {\n    console.error('Error fixing user headOffices data:', error);\n  }\n};\n\n// Run the fix\nconst run = async () => {\n  await connectDB();\n  await fixAllUsersHeadOffices();\n  process.exit(0);\n};\n\nrun();"
        }
    ]
}