{
    "sourceFile": "scripts/diagnoseUsers.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757009643455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757009643455,
            "name": "Commit-0",
            "content": "const mongoose = require('mongoose');\nrequire('dotenv').config();\n\n// Import models\nconst User = require('../src/user/User');\n\n// MongoDB connection\nconst connectDB = async () => {\n  try {\n    const conn = await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/glcukscare', {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n  } catch (error) {\n    console.error(`Error: ${error.message}`);\n    process.exit(1);\n  }\n};\n\n// Function to diagnose user headOffices data\nconst diagnoseUsers = async () => {\n  try {\n    console.log('Starting user diagnosis...');\n    \n    // List of users that should be in Bihar (based on head offices)\n    const biharUsers = [\n      { name: 'Chandan Kumar', email: 'chandan.kumar@gluckscare.com' },\n      { name: 'Kshitiz Maurya', email: 'kshitizmaurya6@gmail.com' },\n      { name: 'JITENDRA NATH MISHRA', email: 'jitendra.mishra@gluckscare.com' },\n      { name: 'KUNDAN KUMAR CHOUDHARY', email: 'kundan.kumar@gluckscare.com' },\n      { name: 'Rajat Kumar Jha', email: 'rajat@gluckscare.com' },\n      { name: 'Mrinal Ratan', email: 'mrinal.ratan@gluckscare.com' },\n      { name: 'Rajeev Kumar', email: 'rajeev.kumar@gluckscare.com' }\n    ];\n    \n    // Bihar head office IDs\n    const biharHeadOfficeIds = [\n      '68a2f682c2507f6549b12533', // Patna\n      '68a2f6a7c2507f6549b1253a', // Gaya\n      '68a2f6bec2507f6549b12542', // Bhagalpur\n      '68a2f6f9c2507f6549b12547', // Madhubani\n      '68a42d720fd473dd1c3074d3', // Darbhanga\n      '68aef669aad40b6e2db0b415', // Samastipur\n      '68aef792aad40b6e2db0b559', // Katihar\n    ];\n    \n    console.log('\\n=== USER DIAGNOSIS ===');\n    \n    for (const userData of biharUsers) {\n      const user = await User.findOne({ email: userData.email })\n        .select('name email headOffice headOffices');\n      \n      if (!user) {\n        console.log(`\\n${userData.name} - NOT FOUND`);\n        continue;\n      }\n      \n      console.log(`\\n${user.name} (${user.email})`);\n      console.log(`  headOffice: ${user.headOffice}`);\n      console.log(`  headOffices:`, user.headOffices);\n      \n      // Check if any of their head offices are in Bihar\n      let hasBiharOffice = false;\n      if (user.headOffices && Array.isArray(user.headOffices)) {\n        for (const office of user.headOffices) {\n          const officeId = office.toString();\n          if (biharHeadOfficeIds.includes(officeId)) {\n            console.log(`    ✓ Has Bihar head office: ${officeId}`);\n            hasBiharOffice = true;\n          } else {\n            console.log(`    ✗ Non-Bihar head office: ${officeId}`);\n          }\n        }\n      }\n      \n      console.log(`  Result: ${hasBiharOffice ? 'SHOULD BE INCLUDED' : 'SHOULD NOT BE INCLUDED'}`);\n    }\n    \n    console.log('\\n=== QUERY TEST ===');\n    \n    // Test the actual query being used\n    const biharHeadOfficeObjectIds = biharHeadOfficeIds.map(id => new mongoose.Types.ObjectId(id));\n    \n    console.log('Querying with Bihar head office IDs:');\n    biharHeadOfficeIds.forEach(id => console.log(`  - ${id}`));\n    \n    const queryResult = await User.find({ \n      isActive: true, \n      headOffices: { $in: biharHeadOfficeObjectIds } \n    }).select('name email headOffices');\n    \n    console.log(`\\nQuery returned ${queryResult.length} users:`);\n    queryResult.forEach(user => {\n      console.log(`  - ${user.name} (${user.email})`);\n    });\n    \n  } catch (error) {\n    console.error('Error diagnosing users:', error);\n  }\n};\n\n// Run the diagnosis\nconst run = async () => {\n  await connectDB();\n  await diagnoseUsers();\n  process.exit(0);\n};\n\nrun();"
        }
    ]
}