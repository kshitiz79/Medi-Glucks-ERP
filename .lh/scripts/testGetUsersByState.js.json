{
    "sourceFile": "scripts/testGetUsersByState.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757009643456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757009643456,
            "name": "Commit-0",
            "content": "const mongoose = require('mongoose');\nrequire('dotenv').config();\n\n// Import models\nconst User = require('../src/user/User');\nconst HeadOffice = require('../src/headoffice/Model');\nconst State = require('../src/state/State'); // Add State model\n\n// MongoDB connection\nconst connectDB = async () => {\n  try {\n    const conn = await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/glcukscare');\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n  } catch (error) {\n    console.error(`Error: ${error.message}`);\n    process.exit(1);\n  }\n};\n\n// Function to test getUsersByState logic\nconst testGetUsersByState = async () => {\n  try {\n    console.log('Testing getUsersByState logic...\\n');\n    \n    // Find a State Head user (Pancham)\n    const stateHeadUser = await User.findOne({ email: 'pancham@gluckscare.com' }).populate('state');\n    \n    if (!stateHeadUser) {\n      console.log('State Head user not found!');\n      return;\n    }\n    \n    console.log(`State Head: ${stateHeadUser.name} (${stateHeadUser.email})`);\n    console.log(`State: ${stateHeadUser.state?.name}\\n`);\n    \n    const stateId = stateHeadUser.state._id;\n    \n    // Get head offices in the state\n    const headOfficesInState = await HeadOffice.find({ \n      state: stateId, \n      isActive: true \n    }).select('_id');\n    \n    const headOfficeIds = headOfficesInState.map(ho => ho._id);\n    \n    console.log(`Found ${headOfficeIds.length} head offices in ${stateHeadUser.state.name} state`);\n    console.log('Head Office IDs:', headOfficeIds.map(id => id.toString()).slice(0, 5), '...\\n');\n    \n    // Test the query that the getUsersByState endpoint uses\n    let query = {\n      isActive: true,\n      $or: [\n        { state: stateId },\n        { headOffices: { $in: headOfficeIds } }\n      ]\n    };\n    \n    // Simplified query without populate to avoid schema issues\n    const users = await User.find(query)\n      .select('name email role headOffices state salaryAmount');\n    \n    console.log(`Found ${users.length} users in ${stateHeadUser.state.name} state:`);\n    \n    users.forEach((user, index) => {\n      console.log(`  ${index + 1}. ${user.name} (${user.email}) - ${user.role}`);\n      console.log(`     headOffices count: ${user.headOffices?.length || 0}`);\n      console.log(`     has salaryAmount: ${user.salaryAmount !== undefined ? 'Yes' : 'No'}`);\n      console.log('');\n    });\n    \n    // Test the formatted response like the API would return (after our changes)\n    const formattedUsers = users.map(user => ({\n      id: user._id,\n      employeeCode: 'N/A', // Not selected in our test query\n      name: user.name,\n      email: user.email,\n      role: user.role,\n      department: 'Not Assigned', // Not selected in our test query\n      headOffices: user.headOffices?.map(() => 'Head Office Name').join(', ') || 'Not Assigned', // Simulate populated data\n      state: stateHeadUser.state.name, // Would be populated in real query\n      branch: 'Not Assigned', // Not selected in our test query\n      employmentType: 'Not Assigned', // Not selected in our test query\n      mobileNumber: 'N/A', // Not selected in our test query\n      dateOfJoining: null, // Not selected in our test query\n      isActive: true, // Part of query\n      createdAt: new Date()\n      // Note: salaryAmount and headOffice fields are intentionally omitted\n    }));\n    \n    console.log(`Formatted response would show ${formattedUsers.length} users`);\n    console.log('Sample formatted user (without salaryAmount and headOffice fields):');\n    console.log(JSON.stringify(formattedUsers[0], null, 2));\n    \n  } catch (error) {\n    console.error('Error testing getUsersByState logic:', error);\n  }\n};\n\n// Run the test\nconst run = async () => {\n  await connectDB();\n  await testGetUsersByState();\n  process.exit(0);\n};\n\nrun();"
        }
    ]
}