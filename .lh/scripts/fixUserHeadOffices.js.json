{
    "sourceFile": "scripts/fixUserHeadOffices.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1757009643455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1757009643455,
            "name": "Commit-0",
            "content": "const mongoose = require('mongoose');\nrequire('dotenv').config();\n\n// Import models\nconst User = require('../src/user/User');\nconst HeadOffice = require('../src/headoffice/Model');\n\n// MongoDB connection\nconst connectDB = async () => {\n  try {\n    const conn = await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/glcukscare', {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    console.log(`MongoDB Connected: ${conn.connection.host}`);\n  } catch (error) {\n    console.error(`Error: ${error.message}`);\n    process.exit(1);\n  }\n};\n\n// Function to fix user headOffices data\nconst fixUserHeadOffices = async () => {\n  try {\n    console.log('Starting user headOffices data fix...');\n    \n    // Find all users with headOffice field (single head office)\n    const usersWithHeadOffice = await User.find({ \n      headOffice: { $exists: true, $ne: null } \n    }).select('_id name email headOffice headOffices');\n    \n    console.log(`Found ${usersWithHeadOffice.length} users with headOffice field`);\n    \n    let fixedCount = 0;\n    \n    for (const user of usersWithHeadOffice) {\n      console.log(`\\nProcessing user: ${user.name} (${user.email})`);\n      \n      // Check if headOffice is already in headOffices array\n      const headOfficeId = user.headOffice.toString();\n      const isAlreadyInArray = user.headOffices.some(ho => ho.toString() === headOfficeId);\n      \n      if (!isAlreadyInArray) {\n        console.log(`  Adding headOffice ${headOfficeId} to headOffices array`);\n        \n        // Add headOffice to headOffices array\n        user.headOffices.push(user.headOffice);\n        \n        // Save the updated user\n        await user.save();\n        console.log(`  âœ“ Updated user: ${user.name}`);\n        fixedCount++;\n      } else {\n        console.log(`  HeadOffice already in headOffices array, skipping...`);\n      }\n    }\n    \n    console.log(`\\nFixed ${fixedCount} users`);\n    \n    // Now check for users with inconsistent headOffices data types\n    console.log('\\nChecking for data type inconsistencies...');\n    \n    const allUsers = await User.find({ \n      headOffices: { $exists: true } \n    }).select('_id name email headOffices');\n    \n    let typeFixedCount = 0;\n    \n    for (const user of allUsers) {\n      let needsUpdate = false;\n      \n      // Check if any headOffices entries are strings instead of ObjectIds\n      for (let i = 0; i < user.headOffices.length; i++) {\n        const office = user.headOffices[i];\n        \n        // If it's a string, convert it to ObjectId\n        if (typeof office === 'string') {\n          try {\n            user.headOffices[i] = new mongoose.Types.ObjectId(office);\n            needsUpdate = true;\n            console.log(`  Converted string to ObjectId for user: ${user.name}`);\n          } catch (err) {\n            console.log(`  Failed to convert string to ObjectId for user: ${user.name}`);\n          }\n        }\n      }\n      \n      if (needsUpdate) {\n        await user.save();\n        typeFixedCount++;\n      }\n    }\n    \n    console.log(`Fixed data types for ${typeFixedCount} users`);\n    \n    // Verify the fix by testing the specific case\n    console.log('\\nVerifying the fix...');\n    \n    const darbhangaId = '68a42d720fd473dd1c3074d3';\n    \n    // Get all head offices in Bihar state\n    const headOfficesInState = await HeadOffice.find({ \n      state: '68b15e4690379b108fcc82dd', \n      isActive: true \n    }).select('_id');\n    \n    const headOfficeIds = headOfficesInState.map(ho => ho._id);\n    \n    console.log(`Found ${headOfficeIds.length} head offices in Bihar state`);\n    \n    // Test query that was failing\n    const usersInState = await User.find({ \n      isActive: true, \n      headOffices: { $in: headOfficeIds } \n    }).select('name email headOffices');\n    \n    console.log(`Found ${usersInState.length} users in Bihar state (after fix):`);\n    usersInState.forEach(user => {\n      console.log(`  - ${user.name} (${user.email})`);\n    });\n    \n    console.log('\\nData fix completed successfully!');\n    \n  } catch (error) {\n    console.error('Error fixing user headOffices data:', error);\n  }\n};\n\n// Run the fix\nconst run = async () => {\n  await connectDB();\n  await fixUserHeadOffices();\n  process.exit(0);\n};\n\nrun();"
        }
    ]
}